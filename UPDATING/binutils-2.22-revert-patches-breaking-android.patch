diff --git a/binutils-2.22/gold/layout.cc b/binutils-2.22/gold/layout.cc
index 1c32bcf..5ea8e13 100644
--- a/binutils-2.22/gold/layout.cc
+++ b/binutils-2.22/gold/layout.cc
@@ -1690,17 +1690,18 @@ Layout::attach_allocated_section_to_segment(Output_section* os)
       this->relro_segment_->add_output_section_to_nonload(os, seg_flags);
     }
 
-  // If we see a section named .interp, put it into a PT_INTERP
-  // segment.  This seems broken to me, but this is what GNU ld does,
-  // and glibc expects it.
+  // If we are making a shared library, and we see a section named
+  // .interp, and the -dynamic-linker option was not used, then put
+  // the .interp section into a PT_INTERP segment.  This is for GNU ld
+  // compatibility.  If making an executable, or if the
+  // -dynamic-linker option was used, we will create the section and
+  // segment in Layout::create_interp.
   if (strcmp(os->name(), ".interp") == 0
-      && !this->script_options_->saw_phdrs_clause())
+      && parameters->options().shared()
+      && parameters->options().dynamic_linker() == NULL)
     {
       if (this->interp_segment_ == NULL)
 	this->make_output_segment(elfcpp::PT_INTERP, seg_flags);
-      else
-	gold_warning(_("multiple '.interp' sections in input files "
-		       "may cause confusing PT_INTERP segment"));
       this->interp_segment_->add_output_section_to_nonload(os, seg_flags);
     }
 }
@@ -2113,12 +2114,8 @@ Layout::relaxation_loop_body(
   // If the user set the address of the text segment, that may not be
   // compatible with putting the segment headers and file headers into
   // that segment.
-  if (parameters->options().user_set_Ttext()
-      && parameters->options().Ttext() % target->common_pagesize() != 0)
-    {
-      load_seg = NULL;
-      phdr_seg = NULL;
-    }
+  if (parameters->options().user_set_Ttext())
+    load_seg = NULL;
 
   gold_assert(phdr_seg == NULL
 	      || load_seg != NULL
@@ -2335,11 +2332,9 @@ Layout::finalize(const Input_objects* input_objects, Symbol_table* symtab,
 				  &versions);
 
       // Create the .interp section to hold the name of the
-      // interpreter, and put it in a PT_INTERP segment.  Don't do it
-      // if we saw a .interp section in an input file.
-      if ((!parameters->options().shared()
-	   || parameters->options().dynamic_linker() != NULL)
-	  && this->interp_segment_ == NULL)
+      // interpreter, and put it in a PT_INTERP segment.
+      if (!parameters->options().shared()
+	  || parameters->options().dynamic_linker() != NULL)
         this->create_interp(target);
 
       // Finish the .dynamic section to hold the dynamic data, and put
@@ -4092,13 +4087,31 @@ Layout::create_interp(const Target* target)
 
   Output_section_data* odata = new Output_data_const(interp, len, 1);
 
-  Output_section* osec = this->choose_output_section(NULL, ".interp",
-						     elfcpp::SHT_PROGBITS,
-						     elfcpp::SHF_ALLOC,
-						     false, ORDER_INTERP,
-						     false);
-  if (osec != NULL)
-    osec->add_output_section_data(odata);
+  Output_section* osec = 0;
+
+  // If we are using a SECTIONS clause, let it decide where the
+  // .interp section should go.  Otherwise always create a new section
+  // so that this .interp section does not get confused with any
+  // section of the same name in the program.
+  if (this->script_options_->saw_sections_clause())
+    osec = this->choose_output_section(NULL, ".interp", elfcpp::SHT_PROGBITS,
+				       elfcpp::SHF_ALLOC, false, ORDER_INTERP,
+				       false);
+  else
+    {
+      const char* n = this->namepool_.add("interp", false, NULL);
+      osec = this->make_output_section(n, elfcpp::SHT_PROGBITS,
+				       elfcpp::SHF_ALLOC, ORDER_INTERP, false);
+    }
+
+  gold_assert(osec);
+  osec->add_output_section_data(odata);
+
+  if (!this->script_options_->saw_phdrs_clause())
+    {
+      Output_segment* oseg = this->make_output_segment(elfcpp::PT_INTERP, elfcpp::PF_R);
+      oseg->add_output_section_to_nonload(osec, elfcpp::PF_R);
+    }
 }
 
 // Add dynamic tags for the PLT and the dynamic relocs.  This is
diff --git a/binutils-2.22/gold/script-sections.cc b/binutils-2.22/gold/script-sections.cc
index 1fad88d..14d4d3d 100644
--- a/binutils-2.22/gold/script-sections.cc
+++ b/binutils-2.22/gold/script-sections.cc
@@ -3938,9 +3938,12 @@ Script_sections::create_note_and_tls_segments(
 	}
 
       // If we are making a shared library, and we see a section named
-      // .interp then put the .interp section in a PT_INTERP segment.
-      // This is for GNU ld compatibility.
-      if (strcmp((*p)->name(), ".interp") == 0)
+      // .interp, and the -dynamic-linker option was not used, then
+      // put the .interp section in a PT_INTERP segment.  This is for
+      // GNU ld compatibility.
+      if (strcmp((*p)->name(), ".interp") == 0
+	  && parameters->options().shared()
+	  && parameters->options().dynamic_linker() == NULL)
 	{
 	  elfcpp::Elf_Word seg_flags =
 	    Layout::section_flags_to_segment((*p)->flags());
